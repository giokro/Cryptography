The El Gamal algorithm is basically a re-ordered Diffie-Hellman key exchange.

So we have our base g and our modulus p, but they aren't public, they are generated by Alice.

Alice makes her public key with her private one and sends it to Bob.

Bob takes a random number (which is basically his private key) makes his public key and the shared key (from Diffie-Hellman).

Now Bob multiplies the message by the shared key and makes the ciphertext. 

He then sends his ciphertext and his public key to Alice.

Alice makes the shared key by adding her private key to Bob's public key.

Finally, Alice decrypts the message - devides the ciphertext by the shared key.



Advantages over Diffie-Hellman:
	The public key is fixed, so you generate it once and you re-use it.
	The random key is different every time you encrypt, 
	!! so the same plaintext encrypted twice will result in different plaintexts !!






	We have a private key k
	We make a public key pub = (g^k) mod p 	(Diffie-Hellman)


	Encryption:
		There are two ciphers (C1 and C2):
			We have a message m and a random number r
			
			C1 = (g^r) mod p
			C2 = m * ((pub^r) mod p)	(we just made the shared key and encrypted the plaintext)

			Ciphertext  = [C1, C2]


	Decryption:
		Decrypt Ciphertext = [C1, C2]
		
		Make shared key sk = C1^pk mod p
		plaintext = C2/sk mod p
